#!/usr/bin/env node

/**
* Module dependencies.
*/

var app = require('../app');
var debug = require('debug')('personalProjectChatApp2:server');
var http = require('http');

/**
* Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
* Create HTTP server.
*/

var server = http.createServer(app);

var io = require('socket.io')(server);

//new  version with Private messaging
//new stuff
var users = {};

io.on('connection', function (socket) {
  socket.on('connect', function () {
    console.log("socket connected");
  });



  //begin new stuff
  socket.on('new user', function (data, callback) {
    if (data in users) {
      callback(false);
    } else {
      callback(true);
      socket.nickname = data;
      users[socket.nickname] = socket;
      io.sockets.emit('usernames', Object.keys(users));
    }
  });
  //end new stuff
  socket.on('chat message', function (msg, callback) {
    var data = msg.trim();
    if(data.substr(0,3) === '/w '){
      data = data.substr(3);
      var ind = data.indexOf(' ');
      if(ind !== -1){
        var name = data.substring(0, ind);
        var msg = data.substring(ind + 1);
        if(name in users){
          users[name].emit('whisper', {message: msg, nick: socket.nickname});
          console.log('Whisper!!!');
        }else{
          callback('Error , enter a valid user for your direct message.');
        }

      }else{
        callback('Error , please enter a message for your direct message.');
      }

    }else{


      io.emit('chat message', {message: msg, nick: socket.nickname});
    }
  });



  socket.on('disconnect', function (data) {
    if (!socket.nickname) {
      return;
    }
    delete users[socket.nickname];
    io.sockets.emit('usernames', Object.keys(users));

  })
});
//end new Version with private messages


//Original version
// //new stuff
// var nickNames = [];
//
// io.on('connection', function (socket) {
//   socket.on('connect', function () {
//     console.log("socket connected");
//   });
//
//
//
//   //begin new stuff
//   socket.on('new user', function (data, callback) {
//     if (nickNames.indexOf(data) !== -1) {
//       callback(false);
//     } else {
//       callback(true);
//       socket.nickname = data;
//       nickNames.push(socket.nickname);
//       io.sockets.emit('usernames', nickNames);
//     }
//   });
//   //end new stuff
//   socket.on('chat message', function (msg) {
//     io.emit('chat message', {message: msg, nick: socket.nickname});
//   });
//
//
//   socket.on('disconnect', function (data) {
//     if (!socket.nickname) {
//       return;
//     }
//     nickNames.splice(nickNames.indexOf(socket.nickname), 1);
//     io.sockets.emit('usernames', nickNames);
//
//   })
// });
//end original version


/**
* Listen on provided port, on all network interfaces.
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
